version: 2.1
orbs:
  docker: circleci/docker@2.2.0
  cloudsmith: cloudsmith/cloudsmith@1.0.5

jobs:
  package:
    machine:
      image: ubuntu-2004:202101-01
      docker_layer_caching: true
    parameters:
      source-path:
        type: string
        default: MAVSDK
      docker-build-image:
        type: string
        default: docker.cloudsmith.io/thread-one/release/flight-developer:23.25.1019
      package-repo-org:
        type: string
        default: thread-one
      package-repo:
        type: string
        default: dev
      package-format: 
        type: string
        default: deb
      package-distribution:
        type: string
        default: ubuntu/focal
      package-path:
        type: string
        default: debian/*.deb
      resource_class:
        description: The architecture and size of the machine
        type: string
    resource_class: << parameters.resource_class >>

    steps:
      - checkout
      - run: 
          name: Fetch and Sync submodules
          command: | 
            echo ==========================================================
            echo Fetching Git Submodules
            echo ==========================================================
            git submodule sync --recursive
            git submodule update --recursive --init
      - docker/check:
          registry:  docker.cloudsmith.io
          docker-username: CLOUDSMITH_API_USER
          docker-password: CLOUDSMITH_API_KEY
      - cloudsmith/ensure-api-key
      - docker/pull:
          images: << parameters.docker-build-image >>
      - run:
          name: Create Builder Image
          command: |
            # calling make debian within the docker to build the package for deployment
            
            echo ==========================================================
            echo Create Intermediate Docker with required packages
            echo ==========================================================
            docker run << parameters.docker-build-image >> /bin/bash -c "apt-get update && apt-get install -y build-essential debhelper fakeroot libjsoncpp-dev libcurl4-openssl-dev libtinyxml2-dev libjsoncpp1 libcurl4 libtinyxml2-6a && git config --global --add safe.directory /workspace /workspace/src"

            echo ==========================================================
            echo Create New Commit 
            echo ==========================================================
            docker commit $(docker ps -lq) builder_image 
            
            echo ==========================================================
            echo Download and build mavlink
            echo ==========================================================
            docker run -v `pwd`:/workspace/src -w /workspace/src  builder_image /bin/bash -c "cmake -Bthird_party/mavlink/build -Sthird_party/mavlink; cmake --build third_party/mavlink/build"

            echo ==========================================================
            echo Generate ChangeLog
            echo ==========================================================
            docker run -v `pwd`:/workspace/src -w /workspace/src  builder_image /bin/bash -c "git config --global --add safe.directory /workspace/src && ./tools/generate_debian_changelog.sh > debian/changelog"


            echo ==========================================================
            echo Build Debian Pkgs
            echo ==========================================================
            # note we need to move /workspace *./deb into the /workspace/src/debian since that's volume-mounted onto the system
            docker run -v `pwd`:/workspace/src -w /workspace/src  builder_image /bin/bash -c "dpkg-buildpackage -us -uc -b && mv workspace/*.deb /workspace/src/debian/"
            # may need to update remote for this one

      - store_artifacts:
          path: dist  

      - cloudsmith/install-cli
      - cloudsmith/publish:
          cloudsmith-repository:  << parameters.package-repo-org >>/<< parameters.package-repo >>
          package-format: << parameters.package-format >>
          package-distribution: << parameters.package-distribution >>
          package-path: ~/project/<< parameters.package-path >>
      - store_test_results:
          path: test_results
      - store_artifacts:
          path: dist  
workflows:
  development:
    jobs:
      - package:
          matrix:
            parameters:
              resource_class: [arm.xlarge, large]
          context:
            - cloudsmith-creds
          filters:
            branches:
              ignore: main
  release:
    jobs:
      - package: 
          matrix:
            parameters:
              resource_class: [arm.xlarge, large]
          package-repo: "public" 
          context:
            - cloudsmith-creds
          filters:
            branches:
              only: main
