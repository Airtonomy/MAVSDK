version: 2.1
orbs:
  docker: circleci/docker@2.2.0
  cloudsmith: cloudsmith/cloudsmith@1.0.5

jobs:
  package:
    machine:
      image: ubuntu-2004:202101-01
      docker_layer_caching: true
    parameters:
      source-path:
        type: string
        default: MAVSDK
      docker-build-image:
        type: string
        default: docker.cloudsmith.io/thread-one/release/flight_controller:latest
      package-repo-org:
        type: string
        default: thread-one
      package-repo:
        type: string
        default: dev
      package-format: 
        type: string
        default: deb
      package-distribution:
        type: string
        default: ubuntu/focal
      package-path:
        type: string
        default: debian/*.deb
      resource_class:
        description: The architecture and size of the machine
        type: string
    resource_class: << parameters.resource_class >>

    steps:
      - checkout
      - run: 
          name: Fetch and Sync submodules
          command: | 
            echo ==========================================================
            echo Fetching Git Submodules
            echo ==========================================================
            git submodule sync --recursive
            git submodule update --recursive --init
      - docker/check:
          registry:  docker.cloudsmith.io
          docker-username: CLOUDSMITH_API_USER
          docker-password: CLOUDSMITH_API_KEY
      - cloudsmith/ensure-api-key
      - docker/pull:
          images: << parameters.docker-build-image >>
      - run:
          name: Build Debian Package
          command: |
            # calling make debian within the docker to build the package for deployment
            
            echo ==========================================================
            echo Configure CMake Build
            echo ==========================================================
            docker run -v `pwd`:/workspace -w /workspace  << parameters.docker-build-image >> /bin/bash -c "apt-get update && apt-get install git apt-transport-https ca-certificates gnupg software-properties-common wget -y && wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | sudo apt-key add - && apt-add-repository 'deb https://apt.kitware.com/ubuntu/ focal main' && apt-get update && apt install cmake -y && cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_MAVSDK_SERVER=OFF -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=install -DWERROR=OFF -Bbuild/release -H."

            echo ==========================================================
            echo Build With CMake
            echo ==========================================================
            docker run -v `pwd`:/workspace -w /workspace  << parameters.docker-build-image >> /bin/bash -c "apt-get update && apt-get install git apt-transport-https ca-certificates gnupg software-properties-common wget -y && wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | sudo apt-key add - && apt-add-repository 'deb https://apt.kitware.com/ubuntu/ focal main' && apt-get update && apt install cmake -y && cmake --build build/release --target install -- -j2"

            echo ==========================================================
            echo Create .deb package
            echo ==========================================================
            docker run -v `pwd`:/workspace -w /workspace  << parameters.docker-build-image >> /bin/bash -c "apt-get update && apt-get install git apt-transport-https ca-certificates gnupg software-properties-common wget -y && wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | sudo apt-key add - && apt-add-repository 'deb https://apt.kitware.com/ubuntu/ focal main' && apt-get update && apt install cmake -y && apt-get install build-essential ruby cmake git -y && gem install dotenv -v 2.8.1 -N && gem install clamp -v 1.0.1 -N && gem install mustache -v 0.99.8 -N && gem install cabin insist stud arr-pm backports rexml -N && gem install pleaserun --ignore-dependencies -N && git config --global --add safe.directory /workspace && gem install fpm --ignore-dependencies -N && ./tools/create_packages.sh ./install ./debian $(uname -m | sed s/aarch64/arm64/ | sed s/x86_64/amd64/) libmavsdk-dev thread-${CIRCLE_WORKFLOW_ID}"


      - store_artifacts:
          path: dist  

      - cloudsmith/install-cli
      - cloudsmith/publish:
          cloudsmith-repository:  << parameters.package-repo-org >>/<< parameters.package-repo >>
          package-format: << parameters.package-format >>
          package-distribution: << parameters.package-distribution >>
          package-path: ~/project/<< parameters.package-path >>
      - store_test_results:
          path: test_results
      - store_artifacts:
          path: dist  
workflows:
  development:
    jobs:
      - package:
          matrix:
            parameters:
              resource_class: [arm.xlarge, large] #amd packaging blocked by mavros
          context:
            - cloudsmith-creds
          filters:
            branches:
              ignore: main
  release:
    jobs:
      - package: 
          matrix:
            parameters:
              resource_class: [arm.xlarge, large]
          package-repo: "public" # after conversation with Aaron, I believe the method was to push public, since the repo is public anyway
          context:
            - cloudsmith-creds
          filters:
            branches:
              only: main
